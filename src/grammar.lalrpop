
use crate::expr::{self, Expr::*};

use lalrpop_util::ParseError;
use std::str::FromStr;

grammar;

extern {
    type Error = expr::Error;
}


pub Lit: i128 = {
    "0" => 0,
    <r#"[0-9]+"#> =>? i128::from_str(<>)
        .map_err(|e| ParseError::User {
            error: expr::Error::LitParse(e.to_string()),
        }),
    <r#"0o[0-7]+"#> =>? i128::from_str_radix(&<>[2..], 8)
        .map_err(|e| ParseError::User {
            error: expr::Error::LitParse(e.to_string()),
        }),
    <r#"0x[0-9a-fA-F]+"#> =>? i128::from_str_radix(&<>[2..], 16)
        .map_err(|e| ParseError::User {
            error: expr::Error::LitParse(e.to_string()),
        }),
}

pub ExprReset = Expr;

pub Expr: expr::Expr = {
    #[precedence(level="0")]
    Lit => Num(<>),
    "(" <ExprReset> ")" => <>,

    #[precedence(level="1")] #[assoc(side="left")]
    "-" <Expr> => Neg(Box::new(<>)),
    "!" <Expr> => Bitnot(Box::new(<>)),

    // Precedence 2 reserved for 'as'

    #[precedence(level="3")] #[assoc(side="left")]
    <l:Expr> "*" <r:Expr> => Mul(Box::new(l), Box::new(r)),
    <l:Expr> "/" <r:Expr> => Div(Box::new(l), Box::new(r)),
    <l:Expr> "%" <r:Expr> => Rem(Box::new(l), Box::new(r)),

    #[precedence(level="4")] #[assoc(side="left")]
    <l:Expr> "+" <r:Expr> => Add(Box::new(l), Box::new(r)),
    <l:Expr> "-" <r:Expr> => Sub(Box::new(l), Box::new(r)),

    #[precedence(level="5")] #[assoc(side="left")]
    <l:Expr> "<<" <r:Expr> => Shl(Box::new(l), Box::new(r)),
    <l:Expr> ">>" <r:Expr> => Shr(Box::new(l), Box::new(r)),

    #[precedence(level="6")] #[assoc(side="left")]
    <l:Expr> "&" <r:Expr> => And(Box::new(l), Box::new(r)),

    #[precedence(level="7")] #[assoc(side="left")]
    <l:Expr> "^" <r:Expr> => Xor(Box::new(l), Box::new(r)),

    #[precedence(level="8")] #[assoc(side="left")]
    <l:Expr> "|" <r:Expr> => Or(Box::new(l), Box::new(r)),
}




